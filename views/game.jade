extends layout

block content
    div.container
      nav.navbar.navbar-light.bg-faded
        div.collapse.navbar-toggleable-xs
          ul.nav.navbar-nav
            li.nav-item Pong
      div.row(style="margin-top: 20px;")
        div.col-sm-10
          div.scene
        div.col-sm-2
          div Player 1:
            span.score.top
          div Player 2:
            span.score.bottom

block script
  script(type='text/javascript').
    var host = "#{host}";
    var socket = io.connect(host + ':3030');
    var context;
    var startState = {
        paddleWidth: 50,
        width: 600,
        height: 400,
        player1: {
            width: 50,
            height: 10
        },
        player2: {
            width: 50,
            height: 10
        }
    };

    socket.on('disconnect', function() {
        socket.destroy();

        alert('Соеденение оборвано');
    });

    socket.on('tick', function (state) {
        updateScene(state);
    });

    socket.on('start', function (state) {
        startState = state;

        updateScene(state);
        registerControl();
    });

    function renderScene() {
        var canvas = document.createElement("canvas");

        canvas.width = startState.width;
        canvas.height = startState.height;

        document.getElementsByClassName('scene')[0].appendChild(canvas);

        context = canvas.getContext('2d');
    }

    function updateScene (state) {
        document.getElementsByClassName('score bottom')[0].textContent = state.player1.score;
        document.getElementsByClassName('score top')[0].textContent = state.player2.score;

        if (state.player1.score == 10 || state.player2.score == 10) {
            alert('Кто-то победил!');
            socket.destroy();
        }

        context.fillStyle = "#000000";
        context.fillRect(0, 0, startState.width, startState.height);

        context.fillStyle = "#FFFFFF";
        context.fillRect(
            state.player1.x,
            state.player1.y,
            startState.player1.width,
            startState.player1.height
        );

        context.fillStyle = "#FFFFFF";
        context.fillRect(
            state.player2.x,
            state.player2.y,
            startState.player2.width,
            startState.player2.height
        );

        context.beginPath();
        context.arc(state.ball.x, state.ball.y, 5, 2 * Math.PI, false);
        context.fillStyle = "#FFFFFF";
        context.fill();
    }

    function registerControl() {
        window.addEventListener("keydown", function (event) {
            if (event.keyCode == 37) {
                socket.emit('left.start', socket.id);
            }
            if (event.keyCode == 39) {
                socket.emit('right.start', socket.id);
            }
        });

        window.addEventListener("keyup", function (event) {
            if (event.keyCode == 37) {
                socket.emit('left.end', socket.id);
            }
            if (event.keyCode == 39) {
                socket.emit('right.end', socket.id);
            }
        });
    }

    window.onload = function() {
        renderScene();
        updateScene({
            player1: {
                score: 0,
                x: (startState.width / 2) - (startState.paddleWidth / 2),
                y: (startState.height - (10 + 10))
            },
            player2: {
                score: 0,
                x: (startState.width / 2) - (startState.paddleWidth / 2),
                y: 10
            },
            ball: {
                x: startState.width / 2,
                y: startState.height / 2
            }
        });
    };

